pipeline {
  agent {
    docker {
      image 'abhishekf5/maven-abhishek-docker-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket to access host's Docker daemon
    }
  }
  stages {
    stage('Checkout') {
      steps {
        // For demonstration, we're just echoing passed.
        // In a real pipeline, you'd check out your source code here.
        sh 'echo passed'
        // Example: git branch: 'main', url: 'https://github.com/your-org/your-repo.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // Build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://65.2.191.7:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "lejub02/ultimate-cicd-pipeline:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          // Build Docker image from the spring-boot-app directory
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          // Push the image to Docker Hub
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-CICD-pipeline"
        GIT_USER_NAME = "leju-b"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
              # Configure Git user settings
              git config user.email "iamleju02@gmail.com"
              git config user.name "leju-b"
              
              # Ensure the repository is in a clean state (discard any local changes)
              git checkout -f
              
              # Use sed to update the image tag in the deployment manifest.
              # This regex captures the fixed portion of the image line and replaces the tag.
              sed -i 's#\\(image: lejub02/ultimate-cicd-pipeline:\\).*#\\1${BUILD_NUMBER}#' spring-boot-app-manifests/deployment.yml
              
              # For debugging, display the updated file
              cat spring-boot-app-manifests/deployment.yml
              
              # Stage the changes
              git add spring-boot-app-manifests/deployment.yml
              
              # Commit the changes (if any changes are present)
              git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
              
              # Push the updated manifest to the Git repository so GitOps (e.g., Argo CD) can deploy it
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  } // End of stages
} // End of pipeline
